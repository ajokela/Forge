trait NodeeOps {

  def importNodeeOps() {
   importNodeeOps();

    val N = tpePar("N")
    val Node = tpe("Node", N)

    data(Node, ("_id", MInt)("_numInNeighbors", MInt),("_numOutNeighbors", MArray(T)))

    static (Node) ("apply", N, Nil :: Node(N), effect = mutable) implements
    allocates (Node, ${$0}, ${ array_empty[N]($0) })
   
    NodeeOps {
      infix ("length") (Nil :: MInt) implements getter(0, "_length")    
      compiler ("raw_data") (Nil :: MArray(Node)) implements getter(0, "_nodes")
      infix ("apply") (MInt :: T) implements composite ${ array_apply(raw_data($self), $1) }
      infix ("update") ((("index", MInt), ("elem", T)) :: MUnit, effect = write(0)) implements
      composite ${ array_update(raw_data($self), $index, $elem) }

    }

    // Return a Unit from the specification function
    ()
  }
}
